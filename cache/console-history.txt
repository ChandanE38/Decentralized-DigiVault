console.log("Stored IPFS Hash:", hash);
const hash = await digiLocker.getDocument(docId);
}
    console.log("No event logs found! Check contract.");
} else {
    console.log("Document ID:", docId);
    const docId = receipt.logs[0].topics[1];  
if (receipt.logs.length > 0) {
console.log(receipt.logs);
console.log(receipt);
console.log("Stored IPFS Hash:", hash);
const hash = await digiLocker.connect(user).getDocument(docId);
console.log("Access granted to:", user.address);
console.log("New Document ID:", newDocId);
let newDocId = receipt.logs[0].topics[1];  
docId = receipt.logs[0].topics[1];
let docId = receipt.logs[0].topics[1];
docId = receipt.logs[0].topics[1];
receipt = await tx.wait();
tx = await digiLocker.uploadDocument("QmAnotherNewIPFSHash789");
let tx = await digiLocker.uploadDocument("QmNewIPFSHash456");
console.log("Stored IPFS Hash:", hash);
const hash = await digiLocker.connect(user).getDocument(docId);
console.log("Stored IPFS Hash:", hash);
console.log("Access granted to:", user.address);
console.log("Uploader Address:", owner.address);
console.log("Document ID:", docId);
console.log("Current Account:", owner.address);
console.log("Stored IPFS Hash:", hash);
const hash = await digiLocker.connect(owner).getDocument(docId);
await digiLocker.connect(owner).grantAccess(docId, user.address);
await digiLocker.grantAccess(docId, user.address);
console.log("Document Owner:", owner.address);
console.log("Document ID:", docId);
const docId = receipt.logs[0].topics[1]; // Extract the document ID
const receipt = await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log("Your Address:", owner.address);
const [owner] = await ethers.getSigners();
const hash = await digiLocker.getDocument(docId);
console.log("Document ID:", docId);
const docId = receipt.logs[0].topics[1];
const receipt = await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log("Contract Loaded!");
const digiLocker = await ethers.getContractAt("DigiLocker", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
const [owner, user] = await ethers.getSigners();
console.log("User Address:", user.address);
console.log("Owner Address:", owner.address);
const [owner, user] = await ethers.getSigners();
await digiLocker.connect(owner).grantAccess(docId, user.address);
const [owner, user] = await ethers.getSigners();
console.log("Document ID:", docId);
const docId = receipt.logs[0].topics[1];
const receipt = await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log("Your Address:", owner.address);
const [owner] = await ethers.getSigners();
const hash = await digiLocker.getDocument(docId);
console.log("Access granted!");
await digiLocker.grantAccess(docId, owner.address);
console.log(await ethers.provider.getSigner().getAddress());
console.log("Contract Owner:", owner);
console.log("Stored IPFS Hash:", hash);
const hash = await digiLocker.getDocument(docId);
console.log("Document ID:", docId);
let docId = receipt.logs[0].topics[1];  // Use 'let' to avoid redeclaration errors
const receipt = await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123"); 
const digiLocker = await ethers.getContractAt("DigiLockerV2", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
const [owner] = await ethers.getSigners();
console.log("Document ID:", docId);
let docId = receipt.logs[0].topics[1];  // Use 'let' to avoid redeclaration errors
const receipt = await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123"); 
console.log(docId);
console.log("Document ID:", docId);
const docId = receipt.logs[0].topics[1];
console.log(receipt);
const receipt = await tx.wait();  // Wait for transaction confirmation
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123"); 
console.log(receipt.logs);
console.log("Document uploaded!");
console.log(receipt.logs);
console.log("Document ID:", docId);
const docId = receipt.logs[0].topics[1];
console.log("Document uploaded!");
await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log(Object.keys(digiLocker));
console.log("Contract Loaded!");
const digiLocker = await ethers.getContractAt("DigiLockerV2", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
const [owner] = await ethers.getSigners();
console.log(Object.keys(digiLocker));
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
let digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
target
console.log(Object.keys(digiLocker));
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512");
console.log(Object.keys(digiLocker));
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
onst digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0x5FbDB2315678afecb367f032d93F642f64180aa3");
const [owner] = await ethers.getSigners();
console.log(Object.keys(digiLocker));
console.log("Contract Loaded!");
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
console.log(owner.address);
const [owner] = await ethers.getSigners();
console.log(Object.keys(digiLocker));
console.log(tx);
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log(Object.keys(digiLocker));
console.log(digiLocker);
console.log("Document uploaded!");
await tx.wait();
const tx = await digiLocker.uploadDocument("QmFakeIPFSHash123");
console.log("Contract loaded successfully!");
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512");
const [owner] = await ethers.getSigners();
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512");
const digiLocker = await ethers.getContractAt("DecentralizedDigiLocker", 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);
const [owner] = await ethers.getSigners();